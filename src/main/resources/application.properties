# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database
spring.datasource.url = jdbc:mysql://localhost:3306/finance

# Username and password
spring.datasource.username = root
spring.datasource.password =

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
# spring.jpa.show-sql = true
# spring.jpa.properties.hibernate.format_sql=true
# logging.level.org.hibernate.SQL=DEBUG
# logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = none
liquibase.enabled = true
liquibase.change-log=classpath:/db/changelog/db.changelog-master.groovy

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# ===============================
# = Security
# ===============================
security.signing-key = 2rbU2sGPCrgypcbE
security.auth.resource-id = finance

security.oauth2.client.client-id = finance
security.oauth2.client.client-secret = Urub42q9bCyFBP7B
security.oauth2.client.access-token-uri = http://localhost:10080/oauth/token
security.oauth2.client.user-authorization-uri = http://localhost:10080/oauth/authorize
security.oauth2.resource.jwk.key-set-uri = http://localhost:10080/oauth/token_key

# Random server port
server.port = 10081
# logging.level. = DEBUG